name: "Nível 2: Testes Automatizados"

on:
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  CHALLENGE_LEVEL: 2
  CHALLENGE_NAME: "testes-automatizados"
  COVERAGE_MIN: 80 # Cobertura mínima exigida em porcentagem

jobs:
  tests-and-coverage:
    name: "Testes e Cobertura"
    runs-on: ubuntu-latest
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}

    steps:
      - name: "Checkout do código"
        uses: actions/checkout@v4

      - name: "Configurar Node.js ${{ env.NODE_VERSION }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: "Instalar dependências"
        run: npm ci

      - name: "Executar testes com cobertura"
        run: npx nyc --reporter=lcov --reporter=text-summary npm test

      - name: "Validar cobertura mínima (${{ env.COVERAGE_MIN }}%)"
        run: |
          # Extrai a porcentagem de cobertura do sumário de texto
          COVERAGE=$(npx nyc report --reporter=text-summary | grep -oP 'Statements\s*:\s*\K[0-9\.]+(?=%)' | head -1)
          
          # Converte para número inteiro para comparação
          COVERAGE_INT=$(echo "$COVERAGE" | cut -d'.' -f1)
          
          echo "Cobertura atual: $COVERAGE%"
          echo "Cobertura mínima exigida: ${{ env.COVERAGE_MIN }}%"
          
          # Compara a cobertura atual com a mínima exigida
          if [ "$COVERAGE_INT" -lt "${{ env.COVERAGE_MIN }}" ]; then
            echo "Erro: A cobertura de testes ($COVERAGE%) está abaixo do mínimo exigido de ${{ env.COVERAGE_MIN }}%."
            exit 1 # Falha o workflow se a cobertura for baixa
          else
            echo "Sucesso: A cobertura de testes está dentro do esperado."
          fi

      - name: "Extrair porcentagem de cobertura"
        id: coverage
        run: |
          COVERAGE=$(npx nyc report --reporter=text-summary | grep -oP 'Statements\s*:\s*\K[0-9\.]+(?=%)' | head -1)
          echo "Coverage: $COVERAGE%"
          echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT

  generate-certificate:
    name: "Desafio Nível 2 - Certificado"
    runs-on: ubuntu-latest
    needs: tests-and-coverage
    if: success() && needs.tests-and-coverage.outputs.coverage != ''

    steps:
      - name: "Gerar certificado"
        run: |
          mkdir -p certificates
          cat > certificates/level-2-certificate.md << EOF
          # Certificado de Conclusão - Nível 2

          **Descomplicando Github Actions - GitHub Actions Edition**
          ---

          Este certificado atesta que **${{ github.actor }}** concluiu com sucesso:
          ## Nível 2: Testes Automatizados

          **Competências desenvolvidas:**
          - Automação de testes
          - Análise de cobertura
          - Lógica de validação com coverage mínimo
          - Upload de artefatos

          **Cobertura:** >= ${{ needs.tests-and-coverage.outputs.coverage }}%
          **Data de conclusão:** $(date)
          **Repositório:** ${{ github.repository }}
          **Workflow Run ID:** ${{ github.run_id }}

          ---
          **Badge conquistado:** Testes Automatizados

          ---
          *Certificado gerado automaticamente pelo GitHub Actions*
          *LINUXtips*
          EOF

      - name: "Upload do certificado"
        uses: actions/upload-artifact@v4
        with:
          name: level-2-certificate
          path: certificates/
          retention-days: 30